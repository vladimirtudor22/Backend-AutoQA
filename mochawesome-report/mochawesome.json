{
  "stats": {
    "suites": 8,
    "tests": 44,
    "passes": 44,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-10T07:55:40.096Z",
    "end": "2023-10-10T07:55:41.538Z",
    "duration": 1442,
    "testsRegistered": 44,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "eae8c20d-1b4f-4a8a-bab4-82a2087363b4",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c96e9db6-028e-4e79-882f-95d1e97c2ed9",
          "title": "Add a new post (POST -> /posts)",
          "fullFile": "/Users/tomatudorvladimir/Programming/backend-test/specs/AddAPost.js",
          "file": "/specs/AddAPost.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to fetch data",
              "fullTitle": "Add a new post (POST -> /posts) Should be able to fetch data",
              "timedOut": false,
              "duration": 334,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  response = await axios.post(`${API_BASE_URL}posts`, {\n    title: \"placeHolderDemoTest\",\n    body: \"plcaHolderDemoTestBodyTest\",\n    userId: 1,\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\",\n    },\n  });\n} catch (error) {\n  throw new Error(\"Failed to fetch data from API\");\n}",
              "err": {},
              "uuid": "d964cb2e-f715-4d8a-9b49-17fd316276d1",
              "parentUUID": "c96e9db6-028e-4e79-882f-95d1e97c2ed9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Status should be 200",
              "fullTitle": "Add a new post (POST -> /posts) Status should be 200",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.status).to.equal(201);",
              "err": {},
              "uuid": "3356dc0d-6379-440b-b8a4-dd40e3864cf1",
              "parentUUID": "c96e9db6-028e-4e79-882f-95d1e97c2ed9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Response should be an object",
              "fullTitle": "Add a new post (POST -> /posts) Response should be an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data).to.be.an(\"object\");",
              "err": {},
              "uuid": "aed22511-b463-44d8-8053-954db69bcc7b",
              "parentUUID": "c96e9db6-028e-4e79-882f-95d1e97c2ed9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Response id should be grater or equal than 100",
              "fullTitle": "Add a new post (POST -> /posts) Response id should be grater or equal than 100",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data.id).to.be.greaterThanOrEqual(100);",
              "err": {},
              "uuid": "40981623-b0ed-4968-b54a-91a637ac420b",
              "parentUUID": "c96e9db6-028e-4e79-882f-95d1e97c2ed9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Response title should be placeHolderDemoTest",
              "fullTitle": "Add a new post (POST -> /posts) Response title should be placeHolderDemoTest",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data.title).to.equal(\"placeHolderDemoTest\");",
              "err": {},
              "uuid": "9cb88502-7a0a-4158-82db-bf013128e250",
              "parentUUID": "c96e9db6-028e-4e79-882f-95d1e97c2ed9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Response body should be plcaHolderDemoTestBodyTest",
              "fullTitle": "Add a new post (POST -> /posts) Response body should be plcaHolderDemoTestBodyTest",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data.body).to.equal(\"plcaHolderDemoTestBodyTest\");",
              "err": {},
              "uuid": "3563642d-e5d3-4ce9-9a51-bd832f4ab660",
              "parentUUID": "c96e9db6-028e-4e79-882f-95d1e97c2ed9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Response userID should be 1",
              "fullTitle": "Add a new post (POST -> /posts) Response userID should be 1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data.userId).to.equal(1);",
              "err": {},
              "uuid": "1d29f683-d01a-4a11-9e0b-cdee8ad4a3af",
              "parentUUID": "c96e9db6-028e-4e79-882f-95d1e97c2ed9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d964cb2e-f715-4d8a-9b49-17fd316276d1",
            "3356dc0d-6379-440b-b8a4-dd40e3864cf1",
            "aed22511-b463-44d8-8053-954db69bcc7b",
            "40981623-b0ed-4968-b54a-91a637ac420b",
            "9cb88502-7a0a-4158-82db-bf013128e250",
            "3563642d-e5d3-4ce9-9a51-bd832f4ab660",
            "1d29f683-d01a-4a11-9e0b-cdee8ad4a3af"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 337,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "69a35469-2d4e-4929-8451-8cb6a33bfdfe",
          "title": "Get all posts (GET -> /posts)",
          "fullFile": "/Users/tomatudorvladimir/Programming/backend-test/specs/AllPosts.js",
          "file": "/specs/AllPosts.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to fetch data",
              "fullTitle": "Get all posts (GET -> /posts) Should be able to fetch data",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  response = await axios.get(`${API_BASE_URL}posts`);\n} catch (error) {\n  throw new Error(\"Failed to fetch data from API\");\n}",
              "err": {},
              "uuid": "d0173ea4-e3d8-4479-86df-aba94fdeeac3",
              "parentUUID": "69a35469-2d4e-4929-8451-8cb6a33bfdfe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Status should be 200",
              "fullTitle": "Get all posts (GET -> /posts) Status should be 200",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.status).to.equal(200);",
              "err": {},
              "uuid": "ac537fc7-dd0d-4472-8076-1c80ba7ce11d",
              "parentUUID": "69a35469-2d4e-4929-8451-8cb6a33bfdfe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Response should be an object",
              "fullTitle": "Get all posts (GET -> /posts) Response should be an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data).to.be.an(\"array\");",
              "err": {},
              "uuid": "ebbf36de-7f2d-4c21-8464-d887fcac478a",
              "parentUUID": "69a35469-2d4e-4929-8451-8cb6a33bfdfe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Response should be longer than 1",
              "fullTitle": "Get all posts (GET -> /posts) Response should be longer than 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data.length).to.be.greaterThan(1);",
              "err": {},
              "uuid": "d677a06c-7835-43f7-8ff7-0154efa86120",
              "parentUUID": "69a35469-2d4e-4929-8451-8cb6a33bfdfe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d0173ea4-e3d8-4479-86df-aba94fdeeac3",
            "ac537fc7-dd0d-4472-8076-1c80ba7ce11d",
            "ebbf36de-7f2d-4c21-8464-d887fcac478a",
            "d677a06c-7835-43f7-8ff7-0154efa86120"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 45,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "03de2ed3-e2f3-430e-b147-46ed71816f87",
          "title": "Delete a post (DELETE -> /posts/100)",
          "fullFile": "/Users/tomatudorvladimir/Programming/backend-test/specs/DeleteAPost.js",
          "file": "/specs/DeleteAPost.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to fetch data",
              "fullTitle": "Delete a post (DELETE -> /posts/100) Should be able to fetch data",
              "timedOut": false,
              "duration": 301,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  response = await axios.delete(`${API_BASE_URL}posts/100`);\n} catch (error) {\n  throw new Error(\"Failed to fetch data from API\");\n}",
              "err": {},
              "uuid": "ae0e5f2e-588b-42d7-80a1-d182a6448c2b",
              "parentUUID": "03de2ed3-e2f3-430e-b147-46ed71816f87",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Status should be 200",
              "fullTitle": "Delete a post (DELETE -> /posts/100) Status should be 200",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.status).to.equal(200);",
              "err": {},
              "uuid": "f4a54139-6aae-4bc6-b40d-73e9cb575479",
              "parentUUID": "03de2ed3-e2f3-430e-b147-46ed71816f87",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ae0e5f2e-588b-42d7-80a1-d182a6448c2b",
            "f4a54139-6aae-4bc6-b40d-73e9cb575479"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 301,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f1824610-c916-4645-bc6a-14352a9d5422",
          "title": "Edit a post (PUT -> /posts/1)",
          "fullFile": "/Users/tomatudorvladimir/Programming/backend-test/specs/EditSpecificPost.js",
          "file": "/specs/EditSpecificPost.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to fetch data",
              "fullTitle": "Edit a post (PUT -> /posts/1) Should be able to fetch data",
              "timedOut": false,
              "duration": 304,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  response = await axios.put(`${API_BASE_URL}posts/1`, {\n    id: 1,\n    title: \"EditTitlePlaceholderTest\",\n    body: \"EditBodyPlaceholderTest\",\n    userId: 1,\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\",\n    },\n  });\n} catch (error) {\n  throw new Error(\"Failed to fetch data from API\");\n}",
              "err": {},
              "uuid": "7543a7bf-af67-45ad-b1fc-bc0ff7e0cdc0",
              "parentUUID": "f1824610-c916-4645-bc6a-14352a9d5422",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Status should be 200",
              "fullTitle": "Edit a post (PUT -> /posts/1) Status should be 200",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.status).to.equal(200);",
              "err": {},
              "uuid": "543edf46-09b2-4ceb-b23b-13b402901e17",
              "parentUUID": "f1824610-c916-4645-bc6a-14352a9d5422",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Response should be an object",
              "fullTitle": "Edit a post (PUT -> /posts/1) Response should be an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data).to.be.an(\"object\");",
              "err": {},
              "uuid": "242a9dd9-ad75-4c03-95eb-bbcf0904a1b2",
              "parentUUID": "f1824610-c916-4645-bc6a-14352a9d5422",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ID should be 1",
              "fullTitle": "Edit a post (PUT -> /posts/1) ID should be 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data.id).to.equal(1);",
              "err": {},
              "uuid": "1bd51e64-6168-4c30-8a7d-a8f2c4e2bbf8",
              "parentUUID": "f1824610-c916-4645-bc6a-14352a9d5422",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Title should be EditTitlePlaceholderTest",
              "fullTitle": "Edit a post (PUT -> /posts/1) Title should be EditTitlePlaceholderTest",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data.title).to.equal(\"EditTitlePlaceholderTest\");",
              "err": {},
              "uuid": "636b65f8-b648-4e91-a650-a4377d3e3c5a",
              "parentUUID": "f1824610-c916-4645-bc6a-14352a9d5422",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Body should be EditBodyPlaceholderTest",
              "fullTitle": "Edit a post (PUT -> /posts/1) Body should be EditBodyPlaceholderTest",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data.body).to.equal(\"EditBodyPlaceholderTest\");",
              "err": {},
              "uuid": "f5c6610a-b567-4353-816b-f511f9afc153",
              "parentUUID": "f1824610-c916-4645-bc6a-14352a9d5422",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "UserID should be 1",
              "fullTitle": "Edit a post (PUT -> /posts/1) UserID should be 1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data.userId).to.equal(1);",
              "err": {},
              "uuid": "6812fd52-02f5-47d4-a5e1-d6c4eb967df0",
              "parentUUID": "f1824610-c916-4645-bc6a-14352a9d5422",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7543a7bf-af67-45ad-b1fc-bc0ff7e0cdc0",
            "543edf46-09b2-4ceb-b23b-13b402901e17",
            "242a9dd9-ad75-4c03-95eb-bbcf0904a1b2",
            "1bd51e64-6168-4c30-8a7d-a8f2c4e2bbf8",
            "636b65f8-b648-4e91-a650-a4377d3e3c5a",
            "f5c6610a-b567-4353-816b-f511f9afc153",
            "6812fd52-02f5-47d4-a5e1-d6c4eb967df0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 306,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "93bd3f9d-7e3c-4cb0-a3f8-a4828a2b9f28",
          "title": "Get all post where userId is 1 (GET -> /posts?userId=1)",
          "fullFile": "/Users/tomatudorvladimir/Programming/backend-test/specs/FilteredResults.js",
          "file": "/specs/FilteredResults.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to fetch data",
              "fullTitle": "Get all post where userId is 1 (GET -> /posts?userId=1) Should be able to fetch data",
              "timedOut": false,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  response = await axios.get(`${API_BASE_URL}posts?userId=1`);\n} catch (error) {\n  throw new Error(\"Failed to fetch data from API\");\n}",
              "err": {},
              "uuid": "d8612512-5991-4345-a872-a8cbad77c2c9",
              "parentUUID": "93bd3f9d-7e3c-4cb0-a3f8-a4828a2b9f28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Status should be 200",
              "fullTitle": "Get all post where userId is 1 (GET -> /posts?userId=1) Status should be 200",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.status).to.equal(200);",
              "err": {},
              "uuid": "b907c19e-31f1-4cc0-9b80-ee35be6ad2fd",
              "parentUUID": "93bd3f9d-7e3c-4cb0-a3f8-a4828a2b9f28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Response should be an array",
              "fullTitle": "Get all post where userId is 1 (GET -> /posts?userId=1) Response should be an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data).to.be.an(\"array\");",
              "err": {},
              "uuid": "70970289-c340-4e14-a571-e4a0163f283c",
              "parentUUID": "93bd3f9d-7e3c-4cb0-a3f8-a4828a2b9f28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Response should be longer than 1",
              "fullTitle": "Get all post where userId is 1 (GET -> /posts?userId=1) Response should be longer than 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data.length).to.be.greaterThan(1);",
              "err": {},
              "uuid": "f88d536d-ea19-4e05-bc1d-b54d61e7095a",
              "parentUUID": "93bd3f9d-7e3c-4cb0-a3f8-a4828a2b9f28",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All psot should have userId 1",
              "fullTitle": "Get all post where userId is 1 (GET -> /posts?userId=1) All psot should have userId 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response.data.map((el) => {\n  expect(el.userId).to.equal(1);\n});",
              "err": {},
              "uuid": "2ec8f3ad-2254-4785-8968-e068ad11186f",
              "parentUUID": "93bd3f9d-7e3c-4cb0-a3f8-a4828a2b9f28",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d8612512-5991-4345-a872-a8cbad77c2c9",
            "b907c19e-31f1-4cc0-9b80-ee35be6ad2fd",
            "70970289-c340-4e14-a571-e4a0163f283c",
            "f88d536d-ea19-4e05-bc1d-b54d61e7095a",
            "2ec8f3ad-2254-4785-8968-e068ad11186f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 36,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7b9f1382-72e5-4121-8268-b7006c96b966",
          "title": "Patch a post (PATCH -> /posts/1)",
          "fullFile": "/Users/tomatudorvladimir/Programming/backend-test/specs/PatchPost.js",
          "file": "/specs/PatchPost.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to fetch data",
              "fullTitle": "Patch a post (PATCH -> /posts/1) Should be able to fetch data",
              "timedOut": false,
              "duration": 306,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  response = await axios.patch(`${API_BASE_URL}posts/1`, {\n    title: \"TestTitlePlaceholder\",\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\",\n    },\n  });\n} catch (error) {\n  throw new Error(\"Failed to fetch data from API\");\n}",
              "err": {},
              "uuid": "dacbae2f-9dd1-4262-b280-cac41a50f15c",
              "parentUUID": "7b9f1382-72e5-4121-8268-b7006c96b966",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Status should be 200",
              "fullTitle": "Patch a post (PATCH -> /posts/1) Status should be 200",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.status).to.equal(200);",
              "err": {},
              "uuid": "726d5456-f342-403a-bf70-ebddd7a1e947",
              "parentUUID": "7b9f1382-72e5-4121-8268-b7006c96b966",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Response should be an object",
              "fullTitle": "Patch a post (PATCH -> /posts/1) Response should be an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data).to.be.an(\"object\");",
              "err": {},
              "uuid": "d6e6dec5-36e4-4c1c-b180-ecbb014ecfc0",
              "parentUUID": "7b9f1382-72e5-4121-8268-b7006c96b966",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ID should be 1",
              "fullTitle": "Patch a post (PATCH -> /posts/1) ID should be 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data.id).to.equal(1);",
              "err": {},
              "uuid": "f2b30d66-ef83-48a4-972d-ac7740e55c2b",
              "parentUUID": "7b9f1382-72e5-4121-8268-b7006c96b966",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Title should be TestTitlePlaceholder",
              "fullTitle": "Patch a post (PATCH -> /posts/1) Title should be TestTitlePlaceholder",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data.title).to.equal(\"TestTitlePlaceholder\");",
              "err": {},
              "uuid": "5d0f6b9d-1040-4c8b-ab28-c526d218cfe9",
              "parentUUID": "7b9f1382-72e5-4121-8268-b7006c96b966",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Body should be patched",
              "fullTitle": "Patch a post (PATCH -> /posts/1) Body should be patched",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data.body).to.equal(\n  \"quia et suscipit\\n\" +\n    \"suscipit recusandae consequuntur expedita et cum\\n\" +\n    \"reprehenderit molestiae ut ut quas totam\\n\" +\n    \"nostrum rerum est autem sunt rem eveniet architecto\"\n);",
              "err": {},
              "uuid": "14e2d4bb-cbe8-4e99-a20a-f5a7d2b70774",
              "parentUUID": "7b9f1382-72e5-4121-8268-b7006c96b966",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "userId should be 1",
              "fullTitle": "Patch a post (PATCH -> /posts/1) userId should be 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data.userId).to.equal(1);",
              "err": {},
              "uuid": "6f7a0c6f-42f7-476d-9b38-46abe116ffcc",
              "parentUUID": "7b9f1382-72e5-4121-8268-b7006c96b966",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dacbae2f-9dd1-4262-b280-cac41a50f15c",
            "726d5456-f342-403a-bf70-ebddd7a1e947",
            "d6e6dec5-36e4-4c1c-b180-ecbb014ecfc0",
            "f2b30d66-ef83-48a4-972d-ac7740e55c2b",
            "5d0f6b9d-1040-4c8b-ab28-c526d218cfe9",
            "14e2d4bb-cbe8-4e99-a20a-f5a7d2b70774",
            "6f7a0c6f-42f7-476d-9b38-46abe116ffcc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 307,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b61700de-7448-4974-8709-3c518e6c4193",
          "title": "Get post with specific id (GET -> /posts/1)",
          "fullFile": "/Users/tomatudorvladimir/Programming/backend-test/specs/PostWithSpecificID.js",
          "file": "/specs/PostWithSpecificID.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to fetch data",
              "fullTitle": "Get post with specific id (GET -> /posts/1) Should be able to fetch data",
              "timedOut": false,
              "duration": 55,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  response = await axios.get(`${API_BASE_URL}posts/1`);\n} catch (error) {\n  throw new Error(\"Failed to fetch data from API\");\n}",
              "err": {},
              "uuid": "e063c716-9d84-4f24-9c0a-83b83e5d6bd0",
              "parentUUID": "b61700de-7448-4974-8709-3c518e6c4193",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Status should be 200",
              "fullTitle": "Get post with specific id (GET -> /posts/1) Status should be 200",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.status).to.equal(200);",
              "err": {},
              "uuid": "adabeeef-918c-4032-ab0f-e2d0a1e25f51",
              "parentUUID": "b61700de-7448-4974-8709-3c518e6c4193",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Response should be an object",
              "fullTitle": "Get post with specific id (GET -> /posts/1) Response should be an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data).to.be.an(\"object\");",
              "err": {},
              "uuid": "3d45723f-86e5-4a40-b508-49a2ba96eb52",
              "parentUUID": "b61700de-7448-4974-8709-3c518e6c4193",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ID should be 1",
              "fullTitle": "Get post with specific id (GET -> /posts/1) ID should be 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data.id).to.equal(1);",
              "err": {},
              "uuid": "bbc4493e-8d63-4d46-a9e9-01cd9febbff7",
              "parentUUID": "b61700de-7448-4974-8709-3c518e6c4193",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should have title",
              "fullTitle": "Get post with specific id (GET -> /posts/1) Should have title",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data.title).not.null;",
              "err": {},
              "uuid": "f9c2650c-13c1-4139-aa2a-152af7f3564f",
              "parentUUID": "b61700de-7448-4974-8709-3c518e6c4193",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should have body",
              "fullTitle": "Get post with specific id (GET -> /posts/1) Should have body",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data.body).not.null;",
              "err": {},
              "uuid": "1a847256-2abd-4cce-83da-e5081dc3fa71",
              "parentUUID": "b61700de-7448-4974-8709-3c518e6c4193",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should have userID",
              "fullTitle": "Get post with specific id (GET -> /posts/1) Should have userID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.data.userId).not.null;",
              "err": {},
              "uuid": "1684662d-2290-41c0-b7aa-6b76e3259e97",
              "parentUUID": "b61700de-7448-4974-8709-3c518e6c4193",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e063c716-9d84-4f24-9c0a-83b83e5d6bd0",
            "adabeeef-918c-4032-ab0f-e2d0a1e25f51",
            "3d45723f-86e5-4a40-b508-49a2ba96eb52",
            "bbc4493e-8d63-4d46-a9e9-01cd9febbff7",
            "f9c2650c-13c1-4139-aa2a-152af7f3564f",
            "1a847256-2abd-4cce-83da-e5081dc3fa71",
            "1684662d-2290-41c0-b7aa-6b76e3259e97"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 55,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5b004adf-e05b-4c0c-8154-aae9a04c3911",
          "title": "Get all posts (GET -> /posts/1/comments)",
          "fullFile": "/Users/tomatudorvladimir/Programming/backend-test/specs/nested.js",
          "file": "/specs/nested.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to fetch data",
              "fullTitle": "Get all posts (GET -> /posts/1/comments) Should be able to fetch data",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  response = await axios.get(`${API_BASE_URL}posts/1/comments`);\n} catch (error) {\n  throw new Error(\"Failed to fetch data from API\");\n}",
              "err": {},
              "uuid": "6b7f95fd-73a7-4508-ba89-68c42f5c5797",
              "parentUUID": "5b004adf-e05b-4c0c-8154-aae9a04c3911",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Status should be 200",
              "fullTitle": "Get all posts (GET -> /posts/1/comments) Status should be 200",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(response.status).to.equal(200);",
              "err": {},
              "uuid": "c8592fc6-0d30-4e3e-ae23-c8dd52a360d3",
              "parentUUID": "5b004adf-e05b-4c0c-8154-aae9a04c3911",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All result must have a name",
              "fullTitle": "Get all posts (GET -> /posts/1/comments) All result must have a name",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response.data.map((el) => {\n  expect(el.name).not.null;\n});",
              "err": {},
              "uuid": "1bc1498f-91dc-498d-aa36-beb88aee7343",
              "parentUUID": "5b004adf-e05b-4c0c-8154-aae9a04c3911",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All result must have a email",
              "fullTitle": "Get all posts (GET -> /posts/1/comments) All result must have a email",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response.data.map((el) => {\n  expect(el.email).not.null;\n});",
              "err": {},
              "uuid": "b10864f2-373e-42c3-80cb-de64599f35d2",
              "parentUUID": "5b004adf-e05b-4c0c-8154-aae9a04c3911",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All result must have a body",
              "fullTitle": "Get all posts (GET -> /posts/1/comments) All result must have a body",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response.data.map((el) => {\n  expect(el.body).not.null;\n});",
              "err": {},
              "uuid": "3cce9220-5784-4d49-83b7-c6870860d7c8",
              "parentUUID": "5b004adf-e05b-4c0c-8154-aae9a04c3911",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6b7f95fd-73a7-4508-ba89-68c42f5c5797",
            "c8592fc6-0d30-4e3e-ae23-c8dd52a360d3",
            "1bc1498f-91dc-498d-aa36-beb88aee7343",
            "b10864f2-373e-42c3-80cb-de64599f35d2",
            "3cce9220-5784-4d49-83b7-c6870860d7c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 34,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}